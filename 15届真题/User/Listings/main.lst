C51 COMPILER V9.56.0.0   MAIN                                                              03/07/2025 16:34:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver;..\..\15届真题) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<key.h>
   2          #include<STC15F2K60S2.H>
   3          #include<seg.h>
   4          #include<led.h>
   5          #include<iic.h>
   6          #include<ds1302.h>
   7          #include<init.h>
   8          #define uchar unsigned char;
   9          unsigned int time_slow_all;
  10          unsigned char key_val,key_down,key_old;
  11          unsigned char seg_pos;
  12          uchar seg_buf[8]={10,10,10,10,10,10,10,10};
  13          uchar seg_point[8]={0,0,0,0,0,0,0,0};
  14          uchar led_buf[8]={0,0,0,0,0,0,0,0};
  15          unsigned char ucRtc[3]={23,59,56};
  16          uchar seg_show_mode;
  17          bit chaoxian_jiaozhun;
  18          bit pinlv_shijian;
  19          unsigned int PF=2000;//超限参数
  20          int BF;//标准参数
  21          unsigned int freq_max;
  22          unsigned int ucRtc_huixian[3];
  23          uchar time_0_2s;
  24          bit light_1;
  25          bit light_2;
  26          int freq;
  27          unsigned int freq_1s;
  28          void key_proc(){
  29   1        if(time_slow_all%10) return;
  30   1        key_val=key_read();
  31   1        key_down=key_val&(key_val^key_old);
  32   1        key_old=key_val;
  33   1        switch(key_down){
  34   2          case 4:
  35   2        if(++seg_show_mode==4) {seg_show_mode=0;chaoxian_jiaozhun=0;pinlv_shijian=0;}
  36   2          break;
  37   2          case 5:
  38   2          if(seg_show_mode==1)chaoxian_jiaozhun^=1; 
  39   2          if(seg_show_mode==3)pinlv_shijian^=1;
  40   2          break;
  41   2          case 8:
  42   2          if(seg_show_mode==1&&chaoxian_jiaozhun==0){ PF+=1000;
  43   3          if(PF==10000) PF=1000;}
  44   2          if(seg_show_mode==1&&chaoxian_jiaozhun==1){ BF+=100;
  45   3          if(BF==1000) BF=900;} 
  46   2          break;
  47   2          case 9:
  48   2          if(seg_show_mode==1&&chaoxian_jiaozhun==0){ PF-=1000; 
  49   3          if(PF==0) PF=9000;} 
  50   2          if(seg_show_mode==1&&chaoxian_jiaozhun==1){ BF-=100;
  51   3          if(BF==-1000) BF=-900;  } 
  52   2            break;
  53   2        }
  54   1      
C51 COMPILER V9.56.0.0   MAIN                                                              03/07/2025 16:34:02 PAGE 2   

  55   1      }
  56          void seg_proc(){
  57   1          Read_Rtc(ucRtc);
  58   1        if(time_slow_all%50) return;
  59   1        switch(seg_show_mode){
  60   2          case 0://频率界面
  61   2            seg_buf[0]=14;
  62   2            seg_buf[1]=10;
  63   2            seg_buf[2]=10;
  64   2          seg_buf[3]=(freq>0)?((freq>9999)?(freq/10000%10):10):10;
  65   2          seg_buf[4]=(freq>0)?((freq>999)?(freq/1000%10):10):10;
  66   2          seg_buf[5]=(freq>0)?((freq>99)?(freq/100%10):10):10;
  67   2          seg_buf[6]=(freq>0)?((freq>9)?(freq/10%10):10):13;
  68   2          seg_buf[7]=(freq>0)?((freq%10)):13;
  69   2            break;
  70   2          case 1://参数界面
  71   2            ////==========
  72   2          if(!chaoxian_jiaozhun){
  73   3            //超限参数界面
  74   3            seg_buf[0]=11;
  75   3            seg_buf[1]=1;
  76   3            seg_buf[2]=10;
  77   3            seg_buf[3]=10;
  78   3            seg_buf[4]=PF/1000%10;
  79   3            seg_buf[5]=PF/100%10;
  80   3            seg_buf[6]=PF/10%10;
  81   3            seg_buf[7]=PF/1%10;
  82   3          }
  83   2          else{
  84   3            //参数校准界面
  85   3            seg_buf[0]=11;
  86   3            seg_buf[1]=2;
  87   3            seg_buf[2]=10;
  88   3            seg_buf[3]=10;
  89   3            
  90   3            seg_buf[4]=(BF>=0)?10:15;
  91   3            if(BF!=0){
  92   4            seg_buf[5]=(BF>0)?(BF/100%10):(((-1)*BF)/100%10);
  93   4            seg_buf[6]=(BF>0)?(BF/10%10):(((-1)*BF)/10%10);
  94   4            seg_buf[7]=(BF>0)?(BF/1%10):(((-1)*BF)/1%10);
  95   4            }
  96   3            else {unsigned char i;for(i=5;i<7;i++){seg_buf[i]=10;}seg_buf[7]=0;}
  97   3          }
  98   2          /////===========
  99   2            break;
 100   2            case 2://时间界面
 101   2            seg_buf[0]=ucRtc[0]/10%10;
 102   2            seg_buf[1]=ucRtc[0]%10;
 103   2            seg_buf[2]=15;
 104   2            seg_buf[3]=ucRtc[1]/10%10;
 105   2            seg_buf[4]=ucRtc[1]%10;
 106   2            seg_buf[5]=15;
 107   2            seg_buf[6]=ucRtc[2]/10%10;
 108   2            seg_buf[7]=ucRtc[2]%10;       
 109   2            break;
 110   2            case 3://回显界面
 111   2            if(!pinlv_shijian){//频率回显
 112   3            seg_buf[0]=12;
 113   3            seg_buf[1]=14;
 114   3            seg_buf[2]=10;
 115   3              seg_buf[3]=(freq_max>9999)?(freq_max/10000%10):10;
 116   3              seg_buf[4]=(freq_max>999)?(freq_max/1000%10):10;
C51 COMPILER V9.56.0.0   MAIN                                                              03/07/2025 16:34:02 PAGE 3   

 117   3              seg_buf[5]=(freq_max>99)?(freq_max/100%10):10;
 118   3              seg_buf[6]=(freq_max>9)?(freq_max/10%10):10;
 119   3              seg_buf[7]=freq_max/1%10;
 120   3            }
 121   2            else{//时间回显
 122   3            seg_buf[0]=12;
 123   3            seg_buf[1]=16;
 124   3            seg_buf[2]=ucRtc_huixian[0]/10%10;
 125   3            seg_buf[3]=ucRtc_huixian[0]%10;
 126   3            seg_buf[4]=ucRtc_huixian[1]/10%10;
 127   3            seg_buf[5]=ucRtc_huixian[1]%10;
 128   3            seg_buf[6]=ucRtc_huixian[2]/10%10;
 129   3            seg_buf[7]=ucRtc_huixian[2]%10;
 130   3            }
 131   2            break;
 132   2        }
 133   1      
 134   1      }
 135          void freq_time(){
 136   1        unsigned char k;
 137   1        if(freq_max<freq){
 138   2        for(k=0;k<3;k++){ ucRtc_huixian[k]=ucRtc[k];}
 139   2        freq_max=freq;
 140   2        }
 141   1      }
 142          void DAC_Output(){
 143   1        if(freq<0) Da_Write(0);
 144   1        else if(freq<500) Da_Write(51);
 145   1        else if(freq>PF) Da_Write(255);
 146   1        else Da_Write(51.0*((4.0/(PF-500))*(freq-500.0)+1.0));
 147   1      }
 148          void led_proc(){
 149   1        freq_time();
 150   1        if(seg_show_mode==0) led_buf[0]=light_1;else led_buf[0]=0;
 151   1        if(freq<0) led_buf[1]=1;
 152   1        else{
 153   2          if(freq<=PF) led_buf[1]=0;
 154   2          else led_buf[1]=light_2;}
 155   1        DAC_Output();
 156   1      }
 157          
 158          void Timer0_Init(void)    //1毫秒@12.000MHz
 159          {
 160   1        AUXR &= 0x7F;     //定时器时钟12T模式
 161   1        TMOD &= 0xF0;     //设置定时器模式
 162   1        TMOD|=0X05;
 163   1        TL0 = 0x00;       //设置定时初始值
 164   1        TH0 = 0x00;       //设置定时初始值
 165   1        TF0 = 0;        //清除TF0标志
 166   1        TR0 = 1;        //定时器0开始计时
 167   1        EA=1;
 168   1        ET0=1;
 169   1      }
 170          
 171          void Timer1_Init(void)    //1毫秒@12.000MHz
 172          {
 173   1        AUXR &= 0xBF;     //定时器时钟12T模式
 174   1        TMOD &= 0x0F;     //设置定时器模式
 175   1        TL1 = 0x18;       //设置定时初始值
 176   1        TH1 = 0xFC;       //设置定时初始值
 177   1        TF1 = 0;        //清除TF1标志
 178   1        TR1 = 1;        //定时器1开始计时
C51 COMPILER V9.56.0.0   MAIN                                                              03/07/2025 16:34:02 PAGE 4   

 179   1        EA=1;
 180   1        ET1=1;
 181   1      }
 182          void timer()interrupt 3{
 183   1          if(++time_slow_all==1000) {time_slow_all=0;
 184   2          freq=(TH0<<8|TL0);
 185   2          freq+=BF;
 186   2          TH0=0;TL0=0;}
 187   1          if(++seg_pos==8) seg_pos=0;
 188   1          seg_disp(seg_pos,seg_buf[seg_pos],seg_point[seg_pos]);
 189   1          led_disp(seg_pos,led_buf[seg_pos]);
 190   1          if(seg_show_mode==0||freq>PF)if(++time_0_2s==200){light_1^=1;time_0_2s=0;light_2^=1;} 
 191   1      }
 192          void main(){
 193   1        init();
 194   1        Timer0_Init();
 195   1        Timer1_Init();
 196   1        Set_Rtc(ucRtc);
 197   1        while(1){
 198   2        key_proc();
 199   2          led_proc();
 200   2            seg_proc(); 
 201   2        }
 202   1      
 203   1      
 204   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1918    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     77       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
